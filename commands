#---------------------------------System & Kernel--------------------------------------------------

# System/kernel release information
$ uname -a
$ uname -r
$ cat /proc/version

# primary architecture of the machine:  M1 == ARM based vs. INTEL/AMD = x86
# Debian and derivatives
dpkg --print-architecture

# RPM based systems
rpm --eval '%{_arch}'

# change the command prompt
export PS1="linux_machine> "

# Display information about CPU architecture
$ /usr/bin/lscpu
$ cat /proc/cpuinfo

# get the number of CPU or cores
 grep processor /proc/cpuinfo | wc -l

# total  amount  of  free  and used physical and swap memory in the system
$ free -m

# Redhat version
$ cat /etc/redhat-release

# Ubunty version
lsb_release -a

# How long system has been running
$ uptime
$ last reboot

# View patch/updates for RHEL 
$ sx cat /var/log/yum.log | less

# View who is online
$ w
$ who

# Execute "df -h", showing periodic updates
$ watch df -h

#---------------------------------Profiles & Shell-------------------------------------------------
https://bencane.com/2013/09/16/understanding-a-little-more-about-etcprofile-and-etcbashrc/

# Display all the SHELL/ENVIRONMENT  variables
$ set
$ env

# check if the env var exist or it is set otherwise give it a default value
$ aka parameter_expression ${parameter:-word}
test=${test:-"default_value"}

# Verify which shell your're running:
$ echo $SHELL

# Verify env var PATH, which describes the location of different bins
$ echo $PATH

## PATH is set by the shell every time it launches
$ export PATH=$PATH:/place/with/the/file

## Add export PATH=$PATH:/place/with/the/file line in the ~/.bash_profile, ~/.bashrc, or ~/.profile



#---------------------------------Networking--------------------------------------------------

iwconfig  ## configure a wireless network interface , used to display wifi statistics from /proc/net/wireless
ifconfig  ## interface config of the network interfaces on the system eth0 is for NIC connected to the network, lo the loopback, wlan0 or unifi for wireless
ifconfig eth0 up   ## bring up or down an interface

# get default interface
$ route | grep '^default' | grep -o '[^ ]*$'

# Get default gateway (deprecated route n)
$ ip route list

# get IP/interface
$ ip addr  (with no arguments default to #ip address show)
$ hostname -i
$ hostname -I

# grab your local, NAT'd IP address
ifconfig  

# grab the public IP provided to you by your ISP.
curl ifconfig.me

# List all ports for TCP and UDP connections
netstat -tulpn 

# List all socket on which an app listens
tcpid=$(ps aauxfww  | grep tcserver32 | grep -v grep  |  awk '{print $2}') ; lsof -nP -p $tcpid | grep LISTEN

#change hostname
vim /etc/hostname 
vim /etc/hosts

# DNS resolution(errors like ssh can not resolve hostname or could not resolve DNS ) - 
# A match found in the /etc/hosts file will be used before any DNS entry

vim /etc/hosts and add ip and domain name
vim /etc/resolv.conf



/etc/resolv.conf: 
Lists nameservers that are used by your host for DNS resolution. 
If you are using DHCP, this file is automatically populated with DNS record issued by DHCP server.

/etc/hosts/: 
It is just a static lookup method for resolution.

/etc/nsswitch.conf: 
It defined order of resolution.Who should it consult first for resolution, a DNS or a host file? 
For example, if the file has following configuration hosts: files dns then /etc/hosts 
file will be checked first for resolution, if domain is still un-resolvable, DNS will then be consulted.

So the order of name resolution is actually defined in /etc/nsswitch.conf, which usually has this entry:

hosts:          files dns
which means "try files (/etc/hosts); and if it fails, try DNS."

https://nambirajeshblog.wordpress.com/2016/12/12/difference-between-etchosts-vs-etcresolv-conf-in-linux/


# IPTables is a rule based firewall and it is pre-installed on most of Linux operating system
# IP tables main files are at etc/init.d/iptables – init script to start|stop|restart and save rulesets.

/etc/sysconfig/iptables – where Rulesets are saved.
/sbin/iptables – binary

#--------------------Filesystem-------------------------------------------------------------------

# In order to automatically mount file at boot modify the os filesystem table  /etc/fstab. 
# In general you should mount to /mnt directory

$ mount -v %% view mount points
$ findmnt

$ mount /dev/sdaX /media/usb_created_dir %% mount volume or  mount /dev/sdaX /mnt/usb_created_dir
$ umount /dev/sdaX /media/usr_created_dir

# view attached filessytems and their type 
$ df -hT | grep sda
$ ls /dev/sd*  

# List block devices TYPE(disk, partition) and mountpoints
$ lsblk -l

$ cat /sys/bus/usb/devices/*/product | grep STICK_NAME //view inserted USBs  


# In linux and macOS each file/directory is represented by a INODE (data structure that stores all the information about the file exept his
name and actual data)

# display the INODE inode number
$ ls -li | egrep "hard|soft"

6682093 -rw-r--r--  2 us81jt  staff     99 Jan  3 13:36 hard
6682093 -rw-r--r--  2 us81jt  staff     99 Jan  3 13:36 hard_soft
6682153 lrwxr-xr-x  1 us81jt  staff      9 Jan  3 13:37 soft -> hard_soft

# Hard link vs Soft link creation
$ ln file hardlink_file

# ln -s <SOURCE/DESTINATION> <LINK_NAME>
$ ln -s file softlink_file

# Update simlink -force -no-derefernce
$ ln -sfn new_file softlink_name

# Hard link has the same INODE number as the original file; cannot traverse file system boundaries
# Soft link has a different INODE number from the original file; can traverse file system boundaries


# --------------------Search--------------------------------------------------------------------------------

find / -type f file_name 
find . -type f -size 1033c
find /home -name *.jpg	
find /home/alex -iname "*.ini"  
find /home/alex -type d -iname "dir_name"
find . -type f -name file_name


# Search in files Recursive case insensitive and list files
grep -iRl "string" /etc/* 2> /dev/null


#-----------------------FileSize----------------------------------------------------------------------------

# Disk usage per file and directory:
 $ du -sh  /dir_path/file_name
 $ du -h --max-depth=1 /dir_path
 $ du -shxc /dir_path #show total human readable x don't go to other filesystems
 
# Calculate size of each of the system top-level dirs
$ du --max-depth=1 -hx /

# Disk usage per Filesystem:
 $ df -ah   %% disk free, available and used space

#------------------------Services and procs----------------------------------------------------------


## fuser = is more useful in identifying process id opening a particular file.
## lsof  = is useful to find out all file(s) opened by particular process. (List Open Files)

# List files opened by a process

$ lsof -p PID    same as $less -l /proc/<PID>/fd , fd = file descriptor

# List process opening the file you specified

$ fuser FILE 
$ lsof FILE

# Display all processes usign the file and the user id
$ fuser -uvm FILE

# View process opened by user
$ lsof -u USER
   
#-----------------------FIlE-101------------------------------------------------------------------

### Secure Copy -rp recurse and preserve modification times

# Pull REMOTE to LOCAL
$ scp user1@remotehost.edu:foobar.txt /some/local/directory

# Push LOCAL to REMOTE
$ scp foobar.txt user1@remotehost.edu:/some/remote/directory

# using private key
scp -i ~/.ssh/id_rsa root@hostname.net:/tmp/SPECjvm2008-bare.7z /tmp

# between remote machines
scp user1@host1.com:/files/file.txt user2@host2.com:/files

# multiple files
scp user@host1.com:/dir/{file1,file2,file3} /some/local/dir

# Count lines,chars:
wc -n
wc -c

# Copy the folder with all of his content (a: preserve attributes r:recursive)
cp -avr /var/lib/rpm /tmp/backups

# Grep in file content using grouping
grep -i -E "first|second|third" file.txt

# Grep until a desired character , in this example is the dot .
egrep -o '^[^.]+' 

# Grep only from a numbercat
grep -o -E '[0-9]+'  grep only from a numbercat

# Grep after and before 10 lines
grep -A10 -B10  

# Grep RECURSIVE in all files, list file names in which grep found the desired thing
grep -lR "word" .

# Grep RECURSILVE only in XML files, list file names in which grep found the desired thing
grep -lR "word" . --include "*.xml"

# Grep in all xml files
grep -l "word" *.xml

sed -i 's/word1/word2/g' ./path_of_file  %%%%%% replaces word1 with word2
sed '1~2d'   ./filepath  %%%print without the first two lines
sed -n /root/p             %%%prints the line with the patter in this case is 'root'
sed '/^$/d'               %%% eliminates blank lines

read inf
echo "$inf"
cat test.txt
sed -i "s/hello/$inf/g" /home/cg/root/test.txt    %%%%%% give sed a variable as a parameter

tr 'E' 'e'         %%%%%%%    replaces E with e
tr -d 'e'           %%%%%    delete "e" character
tr -d [:digit:]     %%%%  delete all digits
tr -cd [:digit:]    %%%%% delete all chars except digits
tr -cd [:print:]     %%%% remove all non printable characters
tr -s '\n' ' ' < file.txt %%%%  translate all newlines into spaces and make the result as a single line.


# Select only the entries in a particular column, search util a desired delimiter " " and returning only the 9th field
>> cat sql.log | cut -d" " -f9 | sort | uniq  
cut -c2 file.txt //return the chars from each line o  second column 
cut -c2-3 file.txt //range 2-3th collumns 

#view differences between two files
diff file1 file2
diff -s file1.txt file2.txt %%%outputs files are identical if they are

# COLOR stuff 
echo -e "\e[1;31m RED \e[0m"
echo -e "\e[1;32m GREEN \e[0m"  # <-- [0 means not bold
echo -e "\e[1;33m YELLOW \e[0m " # <-- [1 means bold

# prints colored text
print_style () {

    if [ "$2" == "info" ] ; then
        COLOR="96m";
    elif [ "$2" == "success" ] ; then
        COLOR="92m";
    elif [ "$2" == "warning" ] ; then
        COLOR="93m";
    elif [ "$2" == "danger" ] ; then
        COLOR="91m";
    else #default color
        COLOR="0m";
    fi

    STARTCOLOR="\e[$COLOR";
    ENDCOLOR="\e[0m";

    printf "$STARTCOLOR%b$ENDCOLOR" "$1";
}

# nice way to color text
print_style "This is a green text " "success";
print_style "This is a yellow text " "warning";
print_style "This is a light blue with a \t tab " "info";
print_style "This is a red text with a \n new line " "danger";
print_style "This has no color";

#---------------------------------Files and filenames--------------------------------------------------

# find files from a certain location and print only the file names (print all wars files)
find /etc/warfiles -type f -name "*.war" -printf "%f\n"

# get the filename and the extension
A=test.sh
file_name=${A%.*}
file_extension=${A#*.}

#---------------------------------Reading from files--------------------------------------------------

#read file line by line and run cmd for each line
while IFS= read -r line; do cp $line /tmp; done < file_to_read

# read file line by line - each line is a FQDN - and run curl FQDN/metrics endpoint and COLOR OUTPUT
while IFS= read -r s; do echo -e "\033[1;4;32;41m$s exposed metrics are: \e[0m";curl -s http://$s:8000/metrics|awk '{print $1}' | sort | uniq -u;done<file_to_read   

# read reads from stdin the < redirects stdin from a file (which contains FQDN hostnames)
# to use ssh we need to pass to read another file descriptor e.g 10
while read -u10 line; do ssh -qo StrictHostKeyChecking=no $line "hostname -A"; done 10< file_to_read

#count no of occurrences of str1 and str2 my_file
for i in "str1'" "str2'"; do echo $i; grep $i my_file | wc -l; done


#---------------------------------Tricks--------------------------------------------------

# Print to STDOUT and redirect to file in the same time
# tee cmd read from STDIN and write simultaneously to both STDOUT and one or more files
./script.sh |& tee output_file  

# file descriptors and redirection
0: std input
1: std output
2: std error

# redirect 1 to /dev/null then 2  is redirected to 1 which is now to /dev/null
./binary > /dev/null 2>&1
./binary &>/dev/null

# verify history activation aka $set +x
$ set -o | grep history
$ cat << EOF >> ~/.bash_profile
set -o history
EOF

# check SHELL
ps -p $(echo $$)

# change hostname name
vim /etc/hostname
vim /etc/hosts

# Change back to last dir
cd -

# Execute last command (with sudo)
sudo !!

# Quick awk to get the first collumn
ps aux | awk '{print $1}`

# Display file or file system status
stat file
stat dir

# Verify file type
file file_name

# Show WHO is logged 
w

# quick diff
vimdiff file1 file2
diff -y file1 file2

# get the current shell ($0 is the name of the running process)
echo $0

# echo  the PID of the current process.
echo $$ 

# echo the return code of the last executed command. 
echo $? 

# echo  the number of arguments in $*
echo $# 

# echo the list of arguments passed to the current process
echo $* 

# get hostname FQDN
hostname -A

# view ascii from binary file
strings file_name

# Update bash_profile from cli
$ cat << EOF >> ~/.bash_profile
# Add Visual Studio Code (code)
export PATH="\$PATH:/Applications/Visual Studio Code.app/Contents/Resources/app/bin"
EOF

% Running multiple commands e.g for ssh && vs ;
% The “&&” operator executes the second command only if the first command was successful.
% The “;” operator executes the second command even if the first command was successful or fail.
$ ssh sk@192.168.225.22 "uname -r && lsb_release -a"
$ ssh sk@192.168.225.22 "uname -r ; lsb_release -a"


% Pass STDIN as argument to bin which expects a file e.g: strings file.txt
strings - file.txt 
while read -r line; do echo $line | strings  /dev/stdin; done < data.txt


% You can use the "fake" filename /dev/stdin which represents the standard input. E.g cook command needs a file normally
bu using the following construct we can make cook to read from STDIN

So execute this: $echo "$the_recipe" | cook /dev/stdin
The echo command and the pipe sends the contents of the specified variable to the standard input of the next command cook, 
and that opens the standard input (as a separate file descriptor) and reads that.


# create tree alias with function call
alias tree='function tree(){ find ${1:-.} | sed -e "s/[^-][^\/]*\//  |/g" -e "s/|\([^ ]\)/|-\1/"; unset -f tree;}; tree'

# on liner for defining and calling a function with parameters : $alp <pass_ARG>
alias alp='f(){ /path/to/bin  --flag1 -u 'name' --flag2_passed_as_ARG $1; unset -f f; }; f'

# smtp mailx client
mailx -s "test" -S from=stmp.com alex@d.com

echo "Email from me"|mailx -s "Warn Expiry " -S from=$(hostname -A) alex@.dcom
EOT
.

# create archive with timestamp for files older than 7 days ( find with ARGS faster than find with EXEC)
find /path/to/dir/ -maxdepth 1 ! -name "*.tar.gz"  -type f -mtime +7 -print0 | tar -czf /path/to/dir/ /$(date '+%Y-%m-%d').tar.gz" --null -T - && find /path/to/dir/ -maxdepth 1 ! -name "*.tar.gz" -type f -mtime +7 -print0 | xargs -0 rm  || echo "NOK"

# nohup to run a program or script async and capturing the output and you can log out also ;)
nohup ./important_script.sh > output.txt &

------------------------------Volume mounted with NOEXEC
Permission denied even though -rwxrwxrwx. => Volume mounted with NOEXEC flag. Verify
$ df -hP 
/dev/mapper/systemvg-homelv     2.0G  2.0G   74M  97% /home

$ mount | grep /dev/mapper/systemvg-homelv
/dev/mapper/systemvg-homelv on /home type xfs (rw,nosuid,nodev,noexec,relatime,seclabel,attr2,inode64,noquota)


# for with awk AWK and IF
for i in $(oc get nodes | awk 'FNR>1 {print $2}');do if [[ $i != 'Ready' ]];then echo $i;fi;done

#------------------------Logging cleanup---------------------------------------------------------
# systemd-journald uses completely different method of storing event messages from syslog protocol aka journalctl - Query the systemd journal
# journal as written by systemd-journald.service: systemctl status systemd-journald.service : drwxrwxr-x 11 root syslog 4.0K Jan 17 06:25 /var/log

# check configuration
journalctl -u systemd-journald -o json-pretty

# check archived and active journals take up size in the file system.
journalctl --disk-usage

# clean logs
sudo journalctl --rotate # if rotate is not recognized --since today
sudo journalctl --vacuum-time=1s

# remove the content of a file.log without deleting it
: > file.log
cat /dev/null > file.log

# shrink or extend the size of a file to the specified size file, e.g. shrink file.log to 0 bytes
truncate -s 0 file.log

# chrink or extend the size of a file to the specified size file, e.g. shrink file.log to 100 bytes
truncate -s 100 file.log

# crontab example
@reboot sleep 30 && docker start $(docker ps -aq) 1>$(date +/pack/log/docker-reboot-policy-%Y%m%dT%H%M%S) 2>&1

# m h  dom mon dow   command / each day at 9AM
0 9 * * * /usr/local/bin/kubectl delete po -l app.kubernetes.io/instance=fluent-bit -n logging >/home/dej/crontab.log 2>&1


