#---------------------------------System & Kernel--------------------------------------------------

# System/kernel release information

$ uname -a
$ uname -r
$ cat /proc/version

# Display information about CPU arhitecture

$ /usr/bin/lscpu
$ cat /proc/cpuinfo

# total  amount  of  free  and used physical and swap memory in the system

$ free -m


# Redhat version

$ cat /etc/redhat-release

# How long system has been running

$ uptime
$ last reboot

# View patch/updates for RHEL 
$ sx cat /var/log/yum.log | less

# View who is online
$ w
$ who

# Execute "df -h", showing periodic updates
$ watch df -h


#---------------------------------Profiles & Shell-------------------------------------------------
https://bencane.com/2013/09/16/understanding-a-little-more-about-etcprofile-and-etcbashrc/

# Display all the SHELL/ENVIRONMENT  variables

$ set
$ env

# Verify which shell your're running:

$ echo $SHELL

# Verify env var PATH, which describes the location of different bins

$ echo $PATH

## PATH is set by the shell every time it launches

$ export PATH=$PATH:/place/with/the/file

## Add export PATH=$PATH:/place/with/the/file line in the ~/.bash_profile, ~/.bashrc, or ~/.profile



#---------------------------------Networking--------------------------------------------------

iwconfig  ## configure a wireless network interface , used to display wifi statistics from /proc/net/wireless
ifconfig  ## interface config of the network interfaces on the system eth0 is for NIC connected to the network, lo the loopback, wlan0 or unifi for wireless
ifconfig eth0 up   ## bring up or down an interface

# get default interface
$ route | grep '^default' | grep -o '[^ ]*$'

# Get default gateway (deprecated route n)
$ ip route list

# get IP/interface
$ ip addr  (with no arguments default to #ip address show)
$ hostname -i
$ hostname -I


# dig — DNS lookup utility.
# nslookup — Query a name server for information about a remote host.
# ping — Send ICMP ECHO_REQUEST packets to network hosts.


# DNS and reverse DNS lookups (converting domain names to IP addresses and vice versa)
$ host <ip>





echo 0 >/proc/sys/net/ipv4/icmp_echo_ignore_all  ### 0: renable ping reponse 1: disable ping reponse 0  

%%% list all ports for TCP and UDP connections
netstat -tulpn 


%%% list all socket on which an app listens

tcpid=$(ps aauxfww  | grep tcserver32 | grep -v grep  |  awk '{print $2}') ; lsof -nP -p $tcpid | grep LISTEN

#change hostname
vim /etc/hostname 
vim /etc/hosts

# DNS resolution(errors like ssh can not resolve hostname or could not resolve DNS ) - 
A match found in the /etc/hosts file will be used before any DNS entry

vim /etc/hosts and add ip and domain name
vim /etc/resolv.conf



/etc/resolv.conf: Lists nameservers that are used by your host for DNS resolution. 
                If you are using DHCP, this file is automatically populated with DNS record issued by DHCP server.
/etc/hosts/: It is just a static lookup method for resolution.
/etc/nsswitch.conf: It defined order of resolution. 
Who should it consult first for resolution, a DNS or a host file? For example, if the file has following configuration hosts: 
files dns then /etc/hosts 
file will be checked first for resolution, if domain is still un-resolvable, DNS will then be consulted.

So the order of name resolution is actually defined in /etc/nsswitch.conf, which usually has this entry:

hosts:          files dns
which means "try files (/etc/hosts); and if it fails, try DNS."

https://nambirajeshblog.wordpress.com/2016/12/12/difference-between-etchosts-vs-etcresolv-conf-in-linux/


# IPTables is a rule based firewall and it is pre-installed on most of Linux operating system
# IP tables main files are at etc/init.d/iptables – init script to start|stop|restart and save rulesets.

/etc/sysconfig/iptables – where Rulesets are saved.
/sbin/iptables – binary

#--------------------Filesystem-------------------------------------------------------------------

# In order to automatically mount file at boot modify the os filesystem table  /etc/fstab. 
# In general you should mount to /mnt directory

>> mount -v %% view mount points
>> findmnt

>> mount /dev/sdaX /media/usb_created_dir %% mount volume or  mount /dev/sdaX /mnt/usb_created_dir
>> umount /dev/sdaX /media/usr_created_dir

mount | grep "^/dev/sda"  // attach the filesystem found on some device
ls /dev/sd*  //view attached filessytems
cat /sys/bus/usb/devices/*/product | grep STICK_NAME //view inserted USBs  


# In linux and macOS each file/directory is represented by a INODE (data structure that stores all the information about the file exept his
name and actual data)

# display the INODE number
$ ls -li | egrep "hard|soft"

6682093 -rw-r--r--  2 us81jt  staff     99 Jan  3 13:36 hard
6682093 -rw-r--r--  2 us81jt  staff     99 Jan  3 13:36 hard_soft
6682153 lrwxr-xr-x  1 us81jt  staff      9 Jan  3 13:37 soft -> hard_soft

# Hard link vs Soft link creation
$ ln file hardlink_file  
$ ln -s file softlink_file

# Hard link has the same INODE number as the original file; cannot traverse file system boundaries
# Soft link has a different INODE number from the original file; can traverse file system boundaries


# --------------------Search--------------------------------------------------------------------------------

find / -type f file_name 
find . -type f -size 1033c
find /home -name *.jpg	
find /home/alex -iname "*.ini"  
find /home/alex -type d -iname "dir_name"
find . -type f -name file_name


# Search in files Recursive case insensitive and list files
grep -iRl "string" /etc/* 2> /dev/null


#-----------------------FileSize----------------------------------------------------------------------------

# Disk usage per file and directory:
 $ du -sh  /dir_path/file_name
 $ du -h --max-depth=1 /dir_path

# Disk usage per Filesystem:
 $ df -ah   %% disk free, available and used space

#------------------------Services and procs----------------------------------------------------------


## fuser = is more useful in identifying process id opening a particular file.
## lsof  = is useful to find out all file(s) opened by particular process. (List Open Files)

# List files opened by a process

$ lsof -p PID    same as $less -l /proc/<PID>/fd , fd = file descriptor

# List process opening the file you specified

$ fuser FILE 
$ lsof FILE

# Display all processes usign the file and the user id
$ fuser -uvm FILE


# View process opened by user
 $ lsof -u USER
   







#-----------------------FIlE-101------------------------------------------------------------------

# Print to STDOUT and redirect to file in the same time
./script.sh |& tee output_file  

# Count lines,chars:
wc -n
wv -l

# Copy the folder with all of his content (a: preserve attributes r:recursive)
cp -avr /var/lib/rpm /tmp/backups

# View first 5 lines from a file , or paginate the result in terminal
head -n5 file_name
cat file_name | more

# Grep in file content using grouping
grep -i -E "first|second|third" file.txt

# Grep until a desired character , in this example is the dot .
egrep -o '^[^.]+' 

# Grep only from a numbercat
grep -o -E '[0-9]+'  grep only from a numbercat

# Grep after and before 10 lines
grep -A10 -B10  

# Grep RECURSIVE in all files, list file names in which grep found the desired thing
grep -lR "word" .

# Grep RECURSILVE only in XML files, list file names in which grep found the desired thing
grep -lR "word" . --include "*.xml"

# Grep in all xml files
grep -l "word" *.xml

sed -i 's/word1/word2/g' ./path_of_file  %%%%%% replaces word1 with word2
sed '1~2d'   ./filepath  %%%print without the first two lines
sed -n /root/p             %%%prints the line with the patter in this case is 'root'
sed '/^$/d'               %%% eliminates blank lines

read inf
echo "$inf"
cat test.txt
sed -i "s/hello/$inf/g" /home/cg/root/test.txt    %%%%%% give sed a variable as a parameter



tr 'E' 'e'         %%%%%%%    replaces E with e
tr -d 'e'           %%%%%    delete "e" character
tr -d [:digit:]     %%%%  delete all digits
tr -cd [:digit:]    %%%%% delete all chars except digits
tr -cd [:print:]     %%%% remove all non printable characters
tr -s '\n' ' ' < file.txt %%%%  translate all newlines into spaces and make the result as a single line.




# Select only the entries in a particular column, search util a desired delimiter " " and returning only the 9th field
>> cat sql.log | cut -d" " -f9 | sort | uniq  
cut -c2 file.txt //return the chars from each line o  second column 
cut -c2-3 file.txt //range 2-3th collumns 

#view differences between two files
diff file1 file2
diff -s file1.txt file2.txt %%%outputs files are identical if they are

#count no of occurrences of str1 and str2 my_file
for i in "str1'" "str2'"; do echo $i; grep $i my_file | wc -l; done

#change color
echo -e "\e[1;32m text color change \e[0m"



#sound------------------------------------------------------------------------------------
cat /proc/asound/cards  //view sound cards
aplay -l     //view sound cards
pactl set-sin-mute 0 1  //mute sink
pactl -- set-sink-volume 0 100%  //change volume sink
pactl stat  /view sinc status
arecord -d 10 /tmp/sound_test.wav   //record for 10sec sound to tmp directory
aplay 

#---------------------------------Openssl--------------------------------------------------

# OpenSSL's s_client command can be used to analyze client-server communication, 
# including whether a port is open and if that port is capable of accepting an SSL/TLS connection. 
# It is a useful tool for investigating SSL/TLS certificate-based plugins, 
# and for confirming that a line of secure communications is available. 

  timeout 2 openssl s_client -connect HOST:PORT ; if [ $? -eq 24 ] ; then echo "Timeout" ; fi
  timeout 2 openssl s_client -connect HOST:PORT ;  if [ $? -eq 24 ] ; then echo "Timeout" ; fi
 
## Verify if port is open
  openssl s_client -connect <URL or IP>:<port>
  head -n1 < /dev/tcp/<IP>/<PORT> 2>/dev/null >/dev/null; if [ $? -eq 0 ] ; then echo works ; else echo nowork ; fi


#---------------------------------Tricks--------------------------------------------------

% verify history activation aka $set +x
$ set -o | grep history
$ cat << EOF >> ~/.bash_profile
set -o history
EOF

% check SHELL
ps -p $(echo $$)

%Change hostname name
vim /etc/hostname
vim /etc/hosts

%Change back to last dir
cd -

%Execute last command (with sudo)
sudo !!


%Quick awk to get the first collumn
ps aux | awk '{print $1}`

% Display file or file system status
stat file
stat dir

% Verify file type
file file_name

%Show WHO is logged 
w

%quick diff
vimdiff file1 file2
diff -y file1 file2


% echo  the PID of the current process.
echo $$ 

% echo the return code of the last executed command. 
echo $? 

% echo  the number of arguments in $*
echo $# 

% echo the list of arguments passed to the current process
echo $* 

% get hostname FQDN
hostname -A

% view ascii from binary file
strings file_name

% Update bash_profile from cli
$ cat << EOF >> ~/.bash_profile
# Add Visual Studio Code (code)
export PATH="\$PATH:/Applications/Visual Studio Code.app/Contents/Resources/app/bin"
EOF

% Running multiple commands e.g for ssh && vs ;
% The “&&” operator executes the second command only if the first command was successful.
% The “;” operator executes the second command even if the first command was successful or fail.
$ ssh sk@192.168.225.22 "uname -r && lsb_release -a"
$ ssh sk@192.168.225.22 "uname -r ; lsb_release -a"



% Pass STDIN as argument to bin which expects a file e.g: strings file.txt

strings - file.txt 


while read -r line; do echo $line | strings  /dev/stdin; done < data.txt


% You can use the "fake" filename /dev/stdin which represents the standard input. E.g cook command needs a file normally
bu using the following construct we can make cook to read from STDIN

So execute this: $echo "$the_recipe" | cook /dev/stdin
The echo command and the pipe sends the contents of the specified variable to the standard input of the next command cook, 
and that opens the standard input (as a separate file descriptor) and reads that.


------------------------------Volume mounted with NOEXEC
Permission denied even though -rwxrwxrwx. => Volume mounted with NOEXEC flag. Verify
$ df -hP 
/dev/mapper/systemvg-homelv     2.0G  2.0G   74M  97% /home

$ mount | grep /dev/mapper/systemvg-homelv
/dev/mapper/systemvg-homelv on /home type xfs (rw,nosuid,nodev,noexec,relatime,seclabel,attr2,inode64,noquota)








